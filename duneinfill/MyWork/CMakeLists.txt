art_make(
        MODULE_LIBRARIES

                lardataobj_RecoBase
                lardataobj_RawData
		lardataobj_Simulation
		nusimdata_SimulationBase
                larcorealg_Geometry
                larcore_Geometry_Geometry_service
                lardataalg_DetectorInfo
                #dune-raw-data_Overlays
                #dune_ArtSupport
                #dune_CVN_func

                art_Persistency_Common canvas
                art_Persistency_Provenance canvas
                art_Utilities canvas
                cetlib cetlib_except
                ${LARRECO_LIB}
                ${LARDATA_LIB}
                ${ART_FRAMEWORK_CORE}
                ${ART_FRAMEWORK_PRINCIPAL}
                ${ART_FRAMEWORK_SERVICES_REGISTRY}
                ${ART_FRAMEWORK_SERVICES_BASIC}
                ${ART_FRAMEWORK_SERVICES_OPTIONAL}
                ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
                ${ART_ROOT_IO_TFILESERVICE_SERVICE}
                ${MF_MESSAGELOGGER}
                ${MF_UTILITIES}
                ${FHICLCPP}
                ${CLHEP}

                ${ROOT_GEOM}
                ${ROOT_XMLIO}
                ${ROOT_GDML}
                ${ROOT_BASIC_LIB_LIST}
                ${ROOT_SPECTRUM}
                ${ROOT_ROOFIT}
                ${ROOT_ROOFITCORE}

                larsim::Simulation
                lardata::Utilities
                lardata::ArtDataHelper
                nusimdata::SimulationBase
                larsim::MCCheater_PhotonBackTrackerService_service           
                larsim::MCCheater_BackTrackerService_service           
                larsim::MCCheater_ParticleInventoryService_service
                larreco::RecoAlg
                ProtoDUNEUtilities
                MyProtoDUNEUtilities
                geant4reweight::ReweightBaseLib
                geant4reweight::PropBaseLib
                art::Persistency_Common
                canvas
                art::Persistency_Provenance
                art_root_io
                ROOT::Core
                art::Utilities
        )

install_headers()
install_source()

install_fhicl()
FILE(GLOB fcl_files *.fcl)
install_source( EXTRAS ${fcl_files} )

add_subdirectory(run_fcls)
